# name: Build Pymakr

# on:
#   pull_request: ~
#   push:
#     branches-ignore:
#       - "dependabot/**"
#     paths-ignore:
#       - "doc/**"
#   schedule:
#     # Run everyday at 1am
#     - cron: "0 1 * * *"

# jobs:
#   build:
#     name: "Build ${{ matrix.os }}"
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         os: [windows-latest, macos-latest, ubuntu-latest, ubuntu-20.04]
#     steps:
#       - uses: actions/checkout@v1

#       - name: Setup node
#         uses: actions/setup-node@v1
#         with:
#           node-version: "12"

#       - name: build github action
#         shell: bash
#         run: |
#           cd ./.github/actions/fetch-electron-versions
#           npm install
#           npm run build
#           cd ../../../

#       - name: Fetch Electron Versions
#         id: electron
#         uses: ./.github/actions/fetch-electron-versions
#         with:
#           max-count: 3
#           git-token: ${{ secrets.GITHUB_TOKEN }}

#       - name: Install Dependencies
#         shell: bash
#         run: |
#           echo '::group::npm install npx'
#           npm install npx
#           echo '::endgroup::'

#           echo '::group::npm add prebuild-install'
#           npm add prebuild-install --save-dev
#           echo '::endgroup::'

#           echo '::group::npm install --no-audit'
#           npm install --no-audit
#           echo '::endgroup::'

#       #      todo: fix errors in running prebuild-install in Action runners
#       #      - name: Update Native Modules
#       #        run: npm run download-native

#       # TODO
#       # - name: Test Bindings

#       # generic all up electron test
#       - name: Test Bindings (macOS/Windows)
#         if: contains(matrix.os,'ubuntu') == false
#         run: npm run test-electron -- ${{ steps.electron.outputs.versions }}

#       # electron tests with virtual x server
#       - name: Test Bindings (Linux)
#         if: contains(matrix.os,'ubuntu')
#         run: xvfb-run -e /dev/stdout -a npm run test-electron -- ${{ steps.electron.outputs.versions }}

#       # No tests written :(
#       # - name: Run Tests
#       #   run: npm run test

#       - name: Package Extension
#         run: npx vsce package -o pymakr-${{ github.sha }}.vsix

#       - name: Upload VSIX
#         if: github.event_name == 'schedule'
#         uses: actions/upload-artifact@master
#         with:
#           name: pymakr-nightly.vsix
#           path: ./pymakr-${{ github.sha }}.vsix

# #   deploy:
# #    name: Publish
# #    needs: build
# #    # if current branch name contains release and is not a PR
# #    if: contains(github.ref, 'release') && github.event_name == 'push'
# #    runs-on: ubuntu-latest
# #    steps:
# #      - uses: actions/checkout@v1
# #
# #      - name: Install Production Dependencies
# #        run: |
# #          npm ci
# #          npm prune --production
# #
# #      - name: Package Extension
# #        run: npx vsce package
# #
# #      - name: Publish Extension
# #        run: npx vsce publish --pat ${{ secrets.VSCE_TOKEN }}
